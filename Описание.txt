
I. Антипаттерны разработки (development antipatterns):
   а) Антипаттерны в коде:
      1) Файл config/routing.php, спагетти-код. Так же наверно можно отнести к программированию методом копирования и вставки.
	 Повторяющийся код, код слишком длинный. Нарушается принцип DRY.
	 Мне кажется, стоило бы задуматься о некой функции, которая принимала бы параметры "название роута", "путь" и "экшен"
	 и возвращала бы готовый роут.

   б) Антипаттерны в ООП:
      1) Model/Repository/Product.php, божественный объект.
	В классе 3 метода: получить все товары, получить товары из источника и поиск товаров.
	Может быть божественного объекта здесь нет, методов не так уж много, но, мне кажется, принцип единственной ответственности точно
	нарушается. Метод поиска товаров лишний.
	Нужно создать в сервисах отдельный интерфейс "Поиск" и класс.   

      2) Service/Order/Basket.php, божественный объект, спагетти-код.
        Присутствует функционал как корзины, так и заказов --> много методов в классе --> класс стал огромным.
	Нужно класс разделить на два отдельных класса, заказ и корзина.
	

   в) Методологические антипаттерны:



II. Архитектурные антипаттерны (architectural antipatterns):


